[gd_scene load_steps=7 format=2]

[ext_resource path="res://scenes/player/amogus.tscn" type="PackedScene" id=1]
[ext_resource path="res://art/sprites/exlamation.png" type="Texture" id=2]

[sub_resource type="GDScript" id=19]
script/source = "extends RigidBody

signal mission_assigned

onready var ai_path : PathAI = null
onready var current_path_point : Area = null
onready var current_path_point_index : int = 0
onready var speed : float = 3.0
onready var gravity_speed : float = 0.0
onready var mission_assigned : bool = false
onready var ragdoll : bool = false
onready var ragdoll_time : float = 0.0
onready var panic : bool = false
onready var panic_time : float = 0.0
onready var looking_at_player : bool = false
onready var panic_direction : Vector3 = Vector3(rand_range(-1.0, 1.0), 0, rand_range(-1.0, 1.0)).normalized()
onready var panic_dir_time : float = 0.0

func _ready() -> void:
	randomize()
#	ai_path = get_parent().get_node(\"AIPaths/NpcPathAI\")
	if(get_parent() is MissionManager):
		$mission.visible = true
		
func _input(event: InputEvent) -> void:
	if(event.is_action_pressed(\"ui_action\") and looking_at_player and !mission_assigned):
		get_parent().UI.get_node(\"generalUI/action\").visible = false
		$mission.visible = false
		mission_assigned = true
		emit_signal(\"mission_assigned\")
	
func set_ai_path(new_path : PathAI) -> void:
	ai_path = new_path
	current_path_point = new_path.path_points[0]
	
func look_at_direction(direction : Vector2) -> void:
	var origin_2d : Vector2 = Vector2(global_transform.origin.x, global_transform.origin.z)
	var angle : float = origin_2d.angle_to_point(direction)
	$Mesh.rotation.y = angle
	$Mesh.rotation.y -= rad2deg(90)

func _physics_process(delta: float) -> void:
	if($isOnFloor.get_collider() == null):
		gravity_speed -= 0.09
	else:
		gravity_speed = -0.1
		
	if(current_path_point != null and !ragdoll and !panic and !looking_at_player):
		var to_position : Vector3 = -(global_transform.origin - current_path_point.global_transform.origin)
		var direction : Vector3 = to_position.normalized()
		var direction_2d : Vector3 = Vector3(direction.x, gravity_speed, direction.z)
		var gravity : float = 0.09
		linear_velocity = direction_2d * speed
		look_at_direction(Vector2(current_path_point.global_transform.origin.x, current_path_point.global_transform.origin.z))
	elif(ragdoll):
		ragdoll_time += delta
		if(linear_velocity.length() < 0.1 or ragdoll_time >= rand_range(2.5, 4.5)):
			linear_velocity = Vector3.ZERO
			ragdoll = false
			panic = true
			rotation_degrees = Vector3(0, rotation_degrees.y, 0)
			mode = RigidBody.MODE_CHARACTER
			transform.origin.y += 0.5
	elif(panic):
		panic_time += delta
		panic_dir_time += delta
		linear_velocity = panic_direction * 12
		
		if(panic_dir_time >= rand_range(0.5, 1.24)):
			panic_direction = Vector3(rand_range(-1.0, 1.0), gravity_speed, rand_range(-1.0, 1.0)).normalized()
			panic_dir_time = 0.0
			
		if(panic_time >= rand_range(3.5, 6.5)):
			panic = false
			panic_dir_time = 0.0
			panic_time = 0.0
	elif(looking_at_player):
		# TODO: Look at player
		pass
		
func _on_npc_body_entered(body: Node) -> void:
	if(body.collision_layer == CollisionEnums.COLLISION_NPC_CAR
	or body.collision_layer == CollisionEnums.COLLISION_PLAYER
	or body.collision_layer == CollisionEnums.COLLISION_PLAYER_CAR):
		ragdoll = true
		panic = false
		looking_at_player = false
		mode = RigidBody.MODE_RIGID
		ragdoll_time = 0.0
		panic_dir_time = 0.0
		panic_time = 0.0

func _on_Area_body_entered(body: Node) -> void:
	if(body.collision_layer == CollisionEnums.COLLISION_PLAYER
	and !ragdoll and !panic):
		looking_at_player = true
		if(get_parent() is MissionManager and !mission_assigned):
			get_parent().UI.get_node(\"generalUI/action\").visible = true

func _on_Area_body_exited(body: Node) -> void:
	if(body.collision_layer == CollisionEnums.COLLISION_PLAYER
	and !ragdoll and !panic and looking_at_player):
		looking_at_player = false
	if(get_parent() is MissionManager and !mission_assigned):
			get_parent().UI.get_node(\"generalUI/action\").visible = false
"

[sub_resource type="CylinderShape" id=18]
height = 1.89347
radius = 0.523102

[sub_resource type="SpatialMaterial" id=20]
albedo_color = Color( 1, 0.796078, 0, 1 )

[sub_resource type="SphereShape" id=21]
radius = 2.16379

[node name="npcRigid" type="RigidBody"]
collision_layer = 4
collision_mask = 31
mode = 2
contacts_reported = 8
contact_monitor = true
script = SubResource( 19 )

[node name="CollisionShape" type="CollisionShape" parent="."]
transform = Transform( 1, 0, 0, 0, -1, -1.50996e-07, 0, 1.50996e-07, -1, 0, -0.183165, 8.00641e-09 )
shape = SubResource( 18 )

[node name="Mesh" parent="." instance=ExtResource( 1 )]

[node name="MeshInstance" parent="Mesh" index="0"]
material/0 = SubResource( 20 )

[node name="MeshInstance3" parent="Mesh" index="1"]
material/0 = SubResource( 20 )

[node name="MeshInstance5" parent="Mesh" index="2"]
material/0 = SubResource( 20 )

[node name="MeshInstance4" parent="Mesh" index="3"]
material/0 = SubResource( 20 )

[node name="MeshInstance2" parent="Mesh" index="4"]
material/0 = SubResource( 20 )

[node name="Area" type="Area" parent="."]

[node name="CollisionShape" type="CollisionShape" parent="Area"]
shape = SubResource( 21 )

[node name="mission" type="Sprite3D" parent="."]
transform = Transform( 0.1, 0, 0, 0, 0.1, 0, 0, 0, 0.1, 0, 1.781, 0 )
visible = false
billboard = 1
texture = ExtResource( 2 )

[node name="isOnFloor" type="RayCast" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
enabled = true
cast_to = Vector3( 0, -0.155, 0 )
collision_mask = 31

[connection signal="body_entered" from="." to="." method="_on_npc_body_entered"]
[connection signal="body_entered" from="Area" to="." method="_on_Area_body_entered"]
[connection signal="body_exited" from="Area" to="." method="_on_Area_body_exited"]

[editable path="Mesh"]
