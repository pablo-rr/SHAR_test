[gd_scene load_steps=6 format=2]

[sub_resource type="GDScript" id=5]
script/source = "extends Area

signal influence_entered

export var color : Color
export var collide_with_player : bool = false
export var collide_with_player_car : bool = false
export var collide_with_npc : bool = false
export var collide_with_npc_car : bool = false

func _ready() -> void:
	$influence.get_surface_material(0).set_shader_param(\"albedo\", color)
	$influence.get_surface_material(0).set_shader_param(\"emission_color\", color)

	
	if(collide_with_player):
		collision_mask += CollisionEnums.COLLISION_PLAYER
	elif(collide_with_player_car):
		collision_mask += CollisionEnums.COLLISION_PLAYER_CAR
	elif(collide_with_npc):
		collision_mask += CollisionEnums.COLLISION_NPC
	elif(collide_with_npc_car):
		collision_mask += CollisionEnums.COLLISION_NPC_CAR

#func set_color(new_color : Color) -> void:
#	$influence.get_surface_material(0).set_shader_param(\"albedo\", new_color)
#	$influence.get_surface_material(0).set_shader_param(\"emission_color\", new_color)

func _on_influenceArea_body_entered(body: Node) -> void:
	print(body)
	if(body.collision_layer == CollisionEnums.COLLISION_PLAYER
	or body.collision_layer == CollisionEnums.COLLISION_PLAYER_CAR
	or body.collision_layer == CollisionEnums.COLLISION_NPC
	or body.collision_layer == CollisionEnums.COLLISION_NPC_CAR):
		print(\"entered\", body.collision_layer)
		emit_signal(\"influence_entered\", body, self)
"

[sub_resource type="SphereShape" id=1]
radius = 0.0319009

[sub_resource type="SphereMesh" id=7]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
//Simple 3D shader to create a force-field effect inspired by Faultless Defense from Guilty Gear Xrd.
//In summary, it takes logic used for simple rim lighting and uses it to create the alpha instead.

render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;//depth_test_disable;
uniform vec4 albedo : hint_color;
uniform vec4 emission_color : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float emission_amount: hint_range(0.0, 16.0) = 5.0f; 
uniform float rim_steepness : hint_range(0.0f, 16.0f) = 3.0f; //higher values mean a smaller rim.
uniform vec3 uv_scale;
uniform vec3 uv_offset;


void vertex() {
	UV=UV*uv_scale.xy+uv_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	EMISSION = emission_color.rgb * emission_amount;
	float PI = 3.14159265359;
	float NdotV = dot(NORMAL, VIEW);
	float rim_light = pow(1.0 - NdotV, rim_steepness);
	ALPHA = rim_light * emission_color.a / PI;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 0, 0.670588, 1, 1 )
shader_param/emission_color = Color( 0, 0.670588, 1, 1 )
shader_param/emission_amount = 5.26
shader_param/rim_steepness = 7.163
shader_param/uv_scale = null
shader_param/uv_offset = null

[node name="smallInfluenceArea" type="Area"]
collision_layer = 32
collision_mask = 0
script = SubResource( 5 )
color = Color( 1, 0.678431, 0, 1 )
collide_with_npc = true

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 1 )

[node name="influence" type="MeshInstance" parent="."]
transform = Transform( 0.3, 0, 0, 0, 0.3, 0, 0, 0, 0.3, 0, 0, 0 )
visible = false
mesh = SubResource( 7 )
material/0 = SubResource( 4 )

[connection signal="body_entered" from="." to="." method="_on_influenceArea_body_entered"]
