[gd_scene load_steps=8 format=2]

[sub_resource type="GDScript" id=6]
script/source = "extends Area

signal influence_entered

export var animated : bool = true
export var color : Color
export var collide_with_player : bool = false
export var collide_with_player_car : bool = false
export var collide_with_npc : bool = false
export var collide_with_npc_car : bool = false

func _ready() -> void:
	if(animated):
		$AnimationPlayer.play(\"idle\")
	
	if(collide_with_player):
		collision_mask += CollisionEnums.COLLISION_PLAYER
	elif(collide_with_player_car):
		collision_mask += CollisionEnums.COLLISION_PLAYER_CAR
	elif(collide_with_npc):
		collision_mask += CollisionEnums.COLLISION_NPC
	elif(collide_with_npc_car):
		collision_mask += CollisionEnums.COLLISION_NPC_CAR
		
	$influence.get_surface_material(0).set_shader_param(\"albedo\", color)
	$influence.get_surface_material(0).set_shader_param(\"emission_color\", color)

#func set_color(new_color : Color) -> void:
#	if(Engine.editor_hint):
#		$influence.get_surface_material(0).set_shader_param(\"albedo\", new_color)
#		$influence.get_surface_material(0).set_shader_param(\"emission_color\", new_color)
#		color = new_color

func _on_influenceArea_body_entered(body: Node) -> void:
	if(body.collision_layer == CollisionEnums.COLLISION_PLAYER
	or body.collision_layer == CollisionEnums.COLLISION_PLAYER_CAR
	or body.collision_layer == CollisionEnums.COLLISION_NPC
	or body.collision_layer == CollisionEnums.COLLISION_NPC_CAR):
		print(body)
		emit_signal(\"influence_entered\", body, self)
"

[sub_resource type="SphereShape" id=10]
radius = 5.0

[sub_resource type="SphereMesh" id=7]

[sub_resource type="Shader" id=3]
code = "shader_type spatial;
//Simple 3D shader to create a force-field effect inspired by Faultless Defense from Guilty Gear Xrd.
//In summary, it takes logic used for simple rim lighting and uses it to create the alpha instead.

render_mode blend_mix,depth_draw_always,cull_back,diffuse_burley,specular_schlick_ggx;//depth_test_disable;
uniform vec4 albedo : hint_color;
uniform vec4 emission_color : hint_color;
uniform sampler2D texture_albedo : hint_albedo;
uniform float emission_amount: hint_range(0.0, 16.0) = 5.0f; 
uniform float rim_steepness : hint_range(0.0f, 16.0f) = 3.0f; //higher values mean a smaller rim.
uniform vec3 uv_scale;
uniform vec3 uv_offset;


void vertex() {
	UV=UV*uv_scale.xy+uv_offset.xy;
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	EMISSION = emission_color.rgb * emission_amount;
	float PI = 3.14159265359;
	float NdotV = dot(NORMAL, VIEW);
	float rim_light = pow(1.0 - NdotV, rim_steepness);
	ALPHA = rim_light * emission_color.a / PI;
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/albedo = Color( 0, 0, 0, 1 )
shader_param/emission_color = Color( 0, 0, 0, 1 )
shader_param/emission_amount = 5.26
shader_param/rim_steepness = 7.163
shader_param/uv_scale = null
shader_param/uv_offset = null

[sub_resource type="Animation" id=8]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath("influence:scale:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("influence:scale:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("influence:scale:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}

[sub_resource type="Animation" id=9]
resource_name = "idle"
length = 2.0
loop = true
tracks/0/type = "bezier"
tracks/0/path = NodePath("influence:scale:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0, 4.5, -0.25, 0, 0.25, 0, 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath("influence:scale:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0, 4.5, -0.25, 0, 0.25, 0, 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}
tracks/2/type = "bezier"
tracks/2/path = NodePath("influence:scale:z")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"points": PoolRealArray( 5, -0.25, 0, 0.25, 0, 4.5, -0.25, 0, 0.25, 0, 5, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0, 1, 2 )
}

[node name="influenceArea" type="Area"]
collision_layer = 32
collision_mask = 0
script = SubResource( 6 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 10 )

[node name="influence" type="MeshInstance" parent="."]
transform = Transform( 5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0 )
mesh = SubResource( 7 )
material/0 = SubResource( 4 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/RESET = SubResource( 8 )
anims/idle = SubResource( 9 )

[connection signal="body_entered" from="." to="." method="_on_influenceArea_body_entered"]
